{
	"info": {
		"_postman_id": "53833dc6-d067-4405-ac2f-093c3ec80056",
		"name": "API Testleri",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44024784",
		"_collection_link": "https://restless-desert-5717852.postman.co/workspace/aa575f7e-d036-43d0-81f0-9126b7a0e646/collection/44024784-53833dc6-d067-4405-ac2f-093c3ec80056?action=share&source=collection_link&creator=44024784"
	},
	"item": [
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Code, type, and message fields exist in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('code');\r",
							"    pm.expect(responseData).to.have.property('type');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"id\": 2422,\n    \"username\": \"pinar\",\n    \"firstName\": \"Pınar\",\n    \"lastName\": \"Tuncez\",\n    \"email\": \"upinartuncez@gmail.com\",\n    \"password\": \"deneme123\",\n    \"phone\": \"55555555555\",\n    \"userStatus\": 0\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/createWithList",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"createWithList"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('code');\r",
							"    pm.expect(responseData).to.have.property('type');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Code is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
							"  pm.expect(responseData.code).to.satisfy((code) => code >= 0, \"Code must be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/login?username=pinar&password=deneme123",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "pinar"
						},
						{
							"key": "password",
							"value": "deneme123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('firstName');\r",
							"    pm.expect(responseData).to.have.property('lastName');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('password');\r",
							"    pm.expect(responseData).to.have.property('phone');\r",
							"    pm.expect(responseData).to.have.property('userStatus');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/pinar",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"pinar"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema for required fields - code, type, and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.code).to.exist;\r",
							"    pm.expect(responseData.type).to.exist;\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 2422,\n    \"username\": \"pinar\",\n    \"firstName\": \"Pınar\",\n    \"lastName\": \"Tun\",\n    \"email\": \"upinartuncez@gmail.com\",\n    \"password\": \"deneme123\",\n    \"phone\": \"55555555555\",\n    \"userStatus\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/pinar",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"pinar"
					]
				}
			},
			"response": []
		},
		{
			"name": "create pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('category');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('photoUrls');\r",
							"    pm.expect(responseData).to.have.property('tags');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category ID is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.category.id).to.be.a('number').and.to.be.at.least(0, \"Category ID should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Category name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 555,\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"cat\"\n  },\n  \"name\": \"Minik\",\n  \"photoUrls\": [\n    \"htps://jdsjshdh\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"Minik\"\n    }\n  ],\n  \"status\": \"available\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "get pet ıd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('category');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('photoUrls');\r",
							"    pm.expect(responseData).to.have.property('tags');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PhotoUrls is an array and not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.photoUrls).to.be.an('array');\r",
							"  responseData.photoUrls.forEach(function(url) {\r",
							"    pm.expect(url).to.not.be.empty;\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Tags is an array and not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.tags).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Tags array should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/555",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"555"
					]
				}
			},
			"response": []
		},
		{
			"name": "update pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.category).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.photoUrls).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.tags).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Category id should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.category.id).to.be.a('number').and.to.be.at.least(0, \"Category id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name, category name, photoUrls, tags name, and status are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
							"    \r",
							"    responseData.photoUrls.forEach(function(url) {\r",
							"        pm.expect(url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Photo URL should not be empty\");\r",
							"    });\r",
							"    \r",
							"    responseData.tags.forEach(function(tag) {\r",
							"        pm.expect(tag.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Tag name should not be empty\");\r",
							"    });\r",
							"    \r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 555,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"cat\"\n    },\n    \"name\": \"Süslü\",\n    \"photoUrls\": [\n        \"htps://jdsjshdh\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"Minik\"\n        }\n    ],\n    \"status\": \"available\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for id, petId, quantity, shipDate, status, and complete properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('petId');\r",
							"    pm.expect(responseData).to.have.property('quantity');\r",
							"    pm.expect(responseData).to.have.property('shipDate');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('complete');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 2422,\n  \"petId\": 555,\n  \"quantity\": 1,\n  \"shipDate\": \"2025-04-12T16:17:26.850Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the expected Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in XML format\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/555",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"555"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Code, type, and message fields exist in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('code');\r",
							"    pm.expect(responseData).to.have.property('type');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/pinar",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"pinar"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - code, type, and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('code');\r",
							"    pm.expect(responseData).to.have.property('type');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Code, type, and message have the expected data types and formats\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.code).to.be.a('number');\r",
							"    pm.expect(responseData.type).to.be.a('string');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/logout",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}